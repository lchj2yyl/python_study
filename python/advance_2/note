拷贝分为深拷贝和浅拷贝，对于=的操作不能当作是拷贝，只是赋值，浅拷贝对对象的值进行拷贝，若对象含有对象，则拷贝对象中对象引用，即赋值，不会对对象中的对象进行拷贝，深拷贝则会对对象中的对象进行拷贝，对于不可变对象(这种事对象也不含可变对象)，那么深拷贝和浅拷贝一样都是做赋值操作


作用域
LEGB
L locals 在方法中全局变量需要添加global 关键字声明为全部变量
E enclosing function
G globals
B builtin
在python加载时候会首先增加__builtin__模块这个模块中定义了常用的方法和类


私有化

xx 公用方法，外部，子类可以访问

_xx 外部不可访问，子类可以访问

__xx 私有方法 外部和子类均不可以访问

__xx__ 魔法属性或则方法 例如 __init__, __all__


Properties

    """
    property(fget=None, fset=None, fdel=None, doc=None) -> property attribute
    
    fget is a function to be used for getting an attribute value, and likewise
    fset is a function for setting, and fdel a function for del'ing, an
    attribute.  Typical use is to define a managed attribute x:
    class C(object):
        def getx(self): return self._x
        def setx(self, value): self._x = value
        def delx(self): del self._x
        x = property(getx, setx, delx, "I'm the 'x' property.")
    
    Decorators make defining new properties or modifying existing ones easy:
    class C(object):
        @property
        def x(self): return self._x
        @x.setter
        def x(self, value): self._x = value
        @x.deleter
        def x(self): del self._x
    """
